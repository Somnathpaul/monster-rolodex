{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list-component.jsx","components/search-box/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","shows","id","style","height","width","name","username","email","CardList","series","map","key","SearchBox","placeholder","handelChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","user","this","filterSeries","filter","result","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAIaA,G,MAAO,SAAAC,GAAK,OAErB,yBAAKC,UAAU,kBACZ,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,MAAMC,GAAtC,aAAqDC,MAAO,CAAEC,OAAQ,QAAUC,MAAO,WAC7G,wCAAcR,EAAMI,MAAMK,MAC1B,0CAAgBT,EAAMI,MAAMM,UAC5B,2BAAIV,EAAMI,MAAMO,UCJVC,G,MAAW,SAAAZ,GAEpB,OACA,yBAAKC,UAAU,aAEbD,EAAMa,OAAOC,KAAI,SAAAV,GAAK,OAClB,kBAAC,EAAD,CAAMW,IAAKX,EAAMC,GAAID,MAAOA,UCRzBY,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAExB,2BAAQjB,UAAU,SACfkB,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCiDAG,G,kBAjDb,aAAc,IAAD,8BACX,+CAoBJH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBnC,EAAKC,MAAQ,CACXd,OAAQ,GACRW,YAAa,IANJ,E,iFAYK,IAAD,OACjBI,MAAM,8CAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACV,OAAQmB,S,+BAQ5B,MAGuBC,KAAKN,MAA5Bd,EAHA,EAGAA,OAAQW,EAHR,EAGQA,YACTU,EAAerB,EAAOsB,QAAO,SAAAC,GAAM,OAAIA,EAAO3B,KAAK4B,cAAcC,SAASd,EAAYe,wBAE5F,OACI,yBAAKtC,UAAU,OACb,+CACA,kBAAC,EAAD,CACCgB,YAAc,sBACdC,aAAce,KAAKf,eAElB,kBAAC,EAAD,CAAUL,OAAQqB,S,GAvCZM,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.9bf0cd5f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.css';\n\nexport const Card = props => (\n\n    <div className=\"card-container\">\n       <img alt=\"monster\" src={`https://robohash.org/${props.shows.id}?set=set3`} style={{ height: '180px' , width: '180px'}}/>\n       <h3> Monster {props.shows.name}</h3>\n       <h4>User name: {props.shows.username}</h4>\n       <p>{props.shows.email}</p>\n    </div>\n)","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './Card-list-style.css';\n\n// this component is responsible only for listing items\n\nexport const CardList = props =>{\n    \n    return (\n    <div className=\"card-list\">{\n\n      props.series.map(shows => (\n          <Card key={shows.id} shows={shows} />\n      ) )\n        \n    }\n    </div>)\n}","import React from 'react';\n\nimport './searchbox.style.css';\n\nexport const SearchBox = ({placeholder, handelChange}) => (\n    \n <input  className=\"search\"\n    type=\"search\" \n    placeholder={placeholder}\n    onChange={ handelChange} />\n\n)","import React,{Component} from 'react';\n\nimport {CardList} from './components/card-list/card-list-component';\nimport {SearchBox} from './components/search-box/searchbox.component';\n\n//import logo from './logo.svg'; \nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    // state\n    this.state = {\n      series: [],\n      searchField: ''\n    }\n  }\n// component did mount will only load when react first load the html on the browser.\n// we can write any function we want to load at the time of rendering the dom \n// called life cycle method\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  // converting into json format\n  .then(response => response.json())\n  // set state\n  .then(user => this.setState({series: user}))\n  \n}\n// arrow function will automatically bind the function with this\nhandelChange = e => {\n  this.setState({searchField: e.target.value})\n}\n\n  render() {\n\n    // search field: \n    const {series, searchField} = this.state;\n    const filterSeries = series.filter(result => result.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n\n    return (\n        <div className=\"App\">\n          <h1>Monster Rolodex</h1>\n          <SearchBox \n           placeholder = 'Search Your monster'\n           handelChange={this.handelChange}\n          />\n            <CardList series={filterSeries}>\n              {/* children component which will not be render unless we call them from componet jsx folder */}\n              \n            </CardList>\n\n          \n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}